import { EventAndListener, eventNS, Listener } from "eventemitter2";
import { Log } from "./Log";
import { ExitEvent, Event, CancelEvent } from "./events";
export declare class Dispatcher {
    private ee;
    protected log: Log;
    constructor();
    static readonly instance: Dispatcher;
    fire<T extends Event | ExitEvent | CancelEvent>(ctx: T): T;
    fire<T extends Event | ExitEvent | CancelEvent>(event: string | string[], ctx: T): T;
    halt<T extends ExitEvent>(event: string | string[], ctx: T): void;
    dispatch(name: any, ...args: any[]): Promise<boolean>;
    enableDebug(): void;
    emit(event: string | string[], ...values: any[]): boolean;
    emitAsync(event: string | string[], ...values: any[]): Promise<any[]>;
    addListener(event: string, listener: Listener): this;
    on(event: string | string[], listener: Listener): this;
    prependListener(event: string | string[], listener: Listener): this;
    once(event: string | string[], listener: Listener): this;
    prependOnceListener(event: string | string[], listener: Listener): this;
    many(event: string | string[], timesToListen: number, listener: Listener): this;
    prependMany(event: string | string[], timesToListen: number, listener: Listener): this;
    onAny(listener: EventAndListener): this;
    prependAny(listener: EventAndListener): this;
    offAny(listener: Listener): this;
    removeListener(event: string | string[], listener: Listener): this;
    off(event: string, listener: Listener): this;
    removeAllListeners(event?: string | eventNS): this;
    setMaxListeners(n: number): void;
    eventNames(): string[];
}
